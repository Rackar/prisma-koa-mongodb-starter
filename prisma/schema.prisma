// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  body     String //全文
  abstract    String //摘要
  ding Boolean @default(false) //是否置顶
  viewCount Int @default(0)

  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  category Category   @relation(fields: [categoryId], references: [id])
  categoryId String  @db.ObjectId

  publish Boolean @default(true)
  active Boolean @default(true)
  sortIndex Int  //排序序号
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  description String?

  posts Post[]

  sortIndex Int  //排序序号
  publish Boolean @default(true)
  active Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  comment String

  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
  
  publish Boolean @default(true)
  active Boolean @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Role {
  BANED
  USER
  PUBLISHER
  EDITOR
  SUB_ADMIN
  ADMIN
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  username String  @unique
  nickname String 
  password String
  name  String?
  avatar String?
  level Int?
  tel  String?
  enable Boolean?

  role Role @default(USER)
  posts Post[]
  comment Comment[]
  org   Org?      @relation(fields: [orgId], references: [id])
  orgId String?    @db.ObjectId
  personalDocument TheDocument[]
  files FileBeenUploaded[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Org{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  type String
  level String

  parentId String? @db.ObjectId
  parent Org? @relation("parent",fields: [parentId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  children Org[] @relation("parent")
  users User[]
  orgDocument TheDocument[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TheDocument{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  url String

  author User? @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId
  org   Org?      @relation(fields: [orgId], references: [id])
  orgId String?    @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FileBeenUploaded{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  description String?
  fieldname String //"file",
  originalname String // "f1.png",
  mimetype String //"image/png",
  filename String //"file-1665656561188f1.png",
  path String //"uploads\\file-1665656561188f1.png",

  author User? @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

