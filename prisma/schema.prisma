// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
model Post {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  // slug     String    @unique
  title    String
  body     String
  comments Comment[]
  author   User      @relation(fields: [authorId], references: [id])
  authorId String    @db.ObjectId
}

// Comments contain a comment string and connect back to the post.
// postId must have @db.ObjectId to match up with Post's id type
model Comment {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  post    Post   @relation(fields: [postId], references: [id])
  postId  String @db.ObjectId
  comment String
}

model User {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  email String  @unique
  password String
  name  String?
  role Int?
  level Int?
  tel  String?
  enable Boolean?
  posts Post[]
  org   Org?      @relation(fields: [orgId], references: [id])
  orgId String?    @db.ObjectId
  personalDocument TheDocument[]
}


model Org{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  type String
  level String
  parentId String? @db.ObjectId
  parent Org? @relation("parent",fields: [parentId], references: [id],onDelete:NoAction,onUpdate:NoAction)
  children Org[] @relation("parent")
  users User[]
  orgDocument TheDocument[]
}

model TheDocument{
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  description String
  url String

  author User? @relation(fields: [authorId], references: [id])
  authorId String? @db.ObjectId
  org   Org?      @relation(fields: [orgId], references: [id])
  orgId String?    @db.ObjectId
}

